{"259324281":{"url":"https://www.meetup.com/Papers-we-love-Zurich/events/259324281/","description":"<p>Papers We Love: Zürich is back!</p> <p>We are grateful to Google for hosting us! Please make sure to RSVP here *and* sign up using the Google registration form (<a href=\"https://docs.google.com/forms/d/e/1FAIpQLSeEi3pmNkS_Le4EMaWsCFyGkMm7JxBDfU2NmrIw1VpPMWgYJg/viewform\" class=\"linkified\">https://docs.google.com/forms/d/e/1FAIpQLSeEi3pmNkS_Le4EMaWsCFyGkMm7JxBDfU2NmrIw1VpPMWgYJg/viewform</a>) - you'll receive a visitor badge at the event. Please fill in the form BY MARCH 24TH.</p> <p>Nikolas Göbel is going to talk software complexity by guiding us through a classic, \"Out of the tar pit\" by Ben Moseley and Peter Marks. (<a href=\"https://github.com/papers-we-love/papers-we-love/blob/master/design/out-of-the-tar-pit.pdf\" class=\"linkified\">https://github.com/papers-we-love/papers-we-love/blob/master/design/out-of-the-tar-pit.pdf</a>)</p> <p>Here's Nikolas' abstract for the talk:</p> <p>In 2006, Ben Moseley and Peter Marks explored something that many of us are familiar with: the creeping feeling that the complexity of a software system has outgrown the complexity of the very domain it was designed to capture.<br/>By taking a fresh look at which kinds of complexity are to be considered essential and which are merely introduced by accident, they put in words many deceptively obvious insights. Better still, they hinted at Codd's relational model and ideas from functional programming as a way out.</p> <p>Unfortunately, they left implementing their approach as an exercise to the reader, calling their own ideas “purely hypothetical” and “not proven in practice”.</p> <p>What were they on to? What has changed? And how deep is the tar pit today?</p> <p>---</p> <p>Nikolas is a software consultant at Clockworks and a computer science graduate at ETH Zurich.<br/>His interest is in building systems that produce accurate answers to complex questions in near real-time,<br/>and simplify the development of powerful, interactive applications.</p> ","photos":[{"url":"https://secure.meetupstatic.com/photos/event/5/c/9/e/600_480083710.jpeg","height":null,"width":null}],"venue":{"lat":47.36555862426758,"address1":"Brandschenkestrasse 100","address2":null,"name":"Google Zurich","postalCode":null,"lon":8.525308609008789,"country":"ch","city":"Zürich"},"utcOffset":3600000,"time":1553619600000,"title":"Nikolas Göbel: Out of the tar pit"},"237963794":{"url":"https://www.meetup.com/Papers-we-love-Zurich/events/237963794/","description":"<p>I'm very excited for the first meetup of PWL: Zürich!</p> <p>Andrea Lattuada will tell us all about <b>Naiad: A Timely Dataflow System</b> by Derek G. Murray, Frank McSherry, Rebecca Isaacs, Michael Isard, Paul Barham, and Martín Abadi.</p> <p>This <a href=\"http://sigops.org/sosp/sosp13/papers/p439-murray.pdf\">paper</a> proposes a very powerful computational model for dataflow programming designed to minimise unnecessary synchronisation. The idea is to have a system that can be the foundation for various data-processing frameworks that can interoperate. There is an open-source implementation in rust (<a href=\"https://github.com/frankmcsherry/timely-dataflow\"><a href=\"https://github.com/frankmcsherry/timely-dataflow\" class=\"linkified\">https://github.com/frankmcsherry/timely-dataflow</a></a>) by one of the authors. It was awarded a best paper award at SOSP 2013.</p> <p>Please RSVP, so that we have an idea of what to expect.</p> ","photos":[{"url":"https://secure.meetupstatic.com/photos/event/c/9/f/d/600_459531709.jpeg","height":null,"width":null},{"url":"https://secure.meetupstatic.com/photos/event/c/9/f/e/600_459531710.jpeg","height":null,"width":null},{"url":"https://secure.meetupstatic.com/photos/event/c/9/f/f/600_459531711.jpeg","height":null,"width":null}],"venue":{"lat":47.378360748291016,"address1":"Universitätstrasse 6","address2":null,"name":"ETH Zurich / Zentrum / CAB H 52","postalCode":null,"lon":8.548723220825195,"country":"ch","city":"Zürich"},"utcOffset":3600000,"time":1490290200000,"title":"Naiad: A Timely Dataflow System"},"240580418":{"url":"https://www.meetup.com/Papers-we-love-Zurich/events/240580418/","description":"<p>PWL: Zürich is back! <a href=\"http://researcher.watson.ibm.com/researcher/view.php?person=zurich-atr\">Animesh Trivedi </a>is going to tell us about Raft!</p> <p>This time around we are going to discuss the Raft distributed consensus algorithm from Diego Ongaro and John Ousterhout. The <a href=\"https://www.usenix.org/node/184041\">paper</a> was originally published at USENIX ATC'14 and was awarded the best paper. Since then, the algorithm has been a part of teaching at many universities, has had many open-sourced implementations in multiple languages, and has found its way into production-level codes. This instantaneous acceptance into the systems building community raises an interesting question about what makes Raft so approachable than in comparison to others options, most notably Paxos? I will present my impressions of the paper and what makes it an interesting read.</p> ","photos":[{"url":"https://secure.meetupstatic.com/photos/event/a/8/7/c/600_462403132.jpeg","height":null,"width":null},{"url":"https://secure.meetupstatic.com/photos/event/a/8/7/d/600_462403133.jpeg","height":null,"width":null},{"url":"https://secure.meetupstatic.com/photos/event/a/8/7/e/600_462403134.jpeg","height":null,"width":null}],"venue":{"lat":47.378360748291016,"address1":"Universitätstrasse 6","address2":null,"name":"ETH Zurich / Zentrum / CAB H 52","postalCode":null,"lon":8.548723220825195,"country":"ch","city":"Zürich"},"utcOffset":7200000,"time":1498753800000,"title":"Animesh Trivedi on Raft: In Search of an Understandable Consensus Algorithm"},"242544627":{"url":"https://www.meetup.com/Papers-we-love-Zurich/events/242544627/","description":"<p>PWL Zürich returns from summer vacations with a compilers paper: Automatic Construction of Inlining Heuristics using Machine Learning by S. Kulkarni, J. Cavazos, C. Wimmer, D. Simon (2013) (<a href=\"https://www.eecis.udel.edu/~skulkarn/papers/cgo-2013.pdf\">pdf</a>).</p> <p>Method inlining is a very important but also dangerous compiler optimization: an inlining decision might lead to significant speedup or performance degradation and has to be constructed carefully. The paper compares various features and inlining techniques, in particular neuro-evolution. We will also discuss how having an idea about inlining traps and benefits might come useful in the \"real-world\", where not everybody is a compiler developer.</p> ","photos":[],"venue":{"lat":47.37835693359375,"address1":"Universitätstrasse 6","address2":null,"name":"ETH Zurich / Zentrum / CAB H53","postalCode":null,"lon":8.548723220825195,"country":"ch","city":"Zürich"},"utcOffset":7200000,"time":1505406600000,"title":"Natallie Baikevich on Automatic Construction of Inlining Heuristics using ML"},"260535044":{"url":"https://www.meetup.com/Papers-we-love-Zurich/events/260535044/","description":"<p>We're really happy to have Frank McSherry as our speaker for our next meet up! Frank is well known for his work on Differential Privacy and on Timely Dataflow.</p> <p>Frank is going to talk new developments in relational joins by guiding us through the excellent \"Skew Strikes Back: New Developments in the Theory of Join Algorithms\" (<a href=\"https://arxiv.org/pdf/1310.3314v2.pdf\" class=\"linkified\">https://arxiv.org/pdf/1310.3314v2.pdf</a>)</p> <p>This time we'll meet at ETH, like the old times, and you'll get to network and chat about research over pizza and beer!</p> <p>Paper abstract:</p> <p>Evaluating the relational join is one of the central algorithmic and most well-studied problems in database systems. A staggering number of variants have been considered including Block-Nested loop join, Hash-Join, Grace, Sort-merge for discussions of more modern issues). Commercial database engines use finely tuned join heuristics that take into account a wide variety of factors including the selectivity of various predicates, memory, IO, etc. In spite of this study of join queries, the textbook description of join processing is suboptimal. This survey describes recent results on join algorithms that have provable worst-case optimality runtime guarantees. We survey recent work and provide a simpler and unified description of these algorithms that we hope is useful for theory-minded readers, algorithm designers, and systems implementors.</p> <p>---</p> <p>Frank McSherry received his PhD from the University of Washington, working with Anna Karlin on spectral analysis of data. He then spent twelve years at Microsoft Research's Silicon Valley research center, working on topics ranging from differential privacy to data-parallel computation. He currently works at ETH Zürich's Systems Group on scalable stream processing and related topics.</p> ","photos":[],"venue":{"lat":47.37835693359375,"address1":"Universitätstrasse 6","address2":null,"name":"ETH Zürich / Zentrum / CAB G 51","postalCode":null,"lon":8.548723220825195,"country":"ch","city":"Zürich"},"utcOffset":7200000,"time":1556813700000,"title":"Frank McSherry - Skew Strikes Back: New Developments in [...] Join Algorithms"},"238755473":{"url":"https://www.meetup.com/Papers-we-love-Zurich/events/238755473/","description":"<p>This time we are going to talk about an older paper. Published in 1998 by Matteo Frigo, Charles E. Leiserson, and Keith H. Randall,  <b>The implementation of the Cilk-5 multithreaded language</b> (<a href=\"http://supertech.csail.mit.edu/papers/cilk5.pdf\">pdf</a>)  is about expressing parallel programs and building a run-time system that efficiently executes them. The paper is strongly motivated by theory, but also very practical. Many of the techniques and approaches used in the paper are (I think) still relevant today.</p> <p>Presenter: Kornilios Kourtis &lt;kkourt _at_ kkourt _dot_ io&gt;</p> ","photos":[],"venue":{"lat":47.37835693359375,"address1":"Universitätstrasse 6","address2":null,"name":"ETH Zurich / Zentrum / CAB G 52","postalCode":null,"lon":8.548723220825195,"country":"ch","city":"Zürich"},"utcOffset":7200000,"time":1493310600000,"title":"The implementation of the Cilk-5 multithreaded language."}}